name: Refresh pimusic images

on:
  schedule:
    - cron: 00 01 * * 0

jobs:

  build-amd64:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Check tag
      id: vars
      run: |
        version=$(git tag -l | sort -V | tail -1)
        major=$(echo $version | grep -Eo "v[0-9]{1,}\." | sed -r "s/(v|\.)//g")
        minor=$(echo $version | grep -Eo "\.[0-9]{1,}\." | sed "s/\.//g")
        hotfix=$(echo $version | grep -Eo "\.[0-9]{1,}$" | sed "s/\.//g")
        echo "version: ${version}, major: ${major}, minor: ${minor}, hotfix: ${hotfix}"
        version="v${major}.${minor}.${hotfix}"
        echo "Version: ${version}"
        echo ::set-output name=version::${version}

    - name: Prepare Dockerfile from template
      shell: bash
      run : |
        ./prepare_dockerfile.sh -a amd64 -c ./config.yaml -d ./Dockerfile -v

    - name: Docker build and push
      shell: bash
      env: 
        DH_USERNAME: ${{ secrets.DOCKERHUB_LOGIN }}
        DH_TOKEN:    ${{ secrets.DOCKERHUB_TOKEN }}
      run: |
        echo ${DH_TOKEN} | docker login --username ${DH_USERNAME} --password-stdin
        docker build -f ./Dockerfile --pull --no-cache -t ${DH_USERNAME}/pimusic_amd64:${{ steps.vars.outputs.version }} .
        docker push ${DH_USERNAME}/pimusic_amd64:${{ steps.vars.outputs.version }}
        if [ "${GITHUB_REF##*/}" == "master" ]; then
          echo "Tagging as latest"
          docker tag ${DH_USERNAME}/pimusic_amd64:${{ steps.vars.outputs.version }} ${DH_USERNAME}/pimusic_amd64:latest 
          docker push ${DH_USERNAME}/pimusic_amd64:latest
        elif [ "${GITHUB_REF##*/}" == "develop" ]; then
          echo "Tagging as develop"
          docker tag ${DH_USERNAME}/pimusic_amd64:${{ steps.vars.outputs.version }} ${DH_USERNAME}/pimusic_amd64:develop 
          docker push ${DH_USERNAME}/pimusic_amd64:develop
        fi

  build-arm32:
    runs-on: [self-hosted, ARM]
    steps:
    - name: Checkout repo 
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Check tag
      id: vars
      run: |
        version=$(git tag -l | sort -V | tail -1)
        major=$(echo $version | grep -Eo "v[0-9]{1,}\." | sed -r "s/(v|\.)//g")
        minor=$(echo $version | grep -Eo "\.[0-9]{1,}\." | sed "s/\.//g")
        hotfix=$(echo $version | grep -Eo "\.[0-9]{1,}$" | sed "s/\.//g")
        echo "version: ${version}, major: ${major}, minor: ${minor}, hotfix: ${hotfix}"
        version="v${major}.${minor}.${hotfix}"
        echo "Version: ${version}"
        echo ::set-output name=version::${version}

    - name: Prepare Dockerfile from template
      shell: bash
      run : |
        ./prepare_dockerfile.sh -a arm32 -c ./config.yaml -d ./Dockerfile -v

    - name: Docker build and push
      shell: bash
      env: 
        DH_USERNAME: ${{ secrets.DOCKERHUB_LOGIN }}
        DH_TOKEN:    ${{ secrets.DOCKERHUB_TOKEN }}
      run: |
        echo ${DH_TOKEN} | docker login --username ${DH_USERNAME} --password-stdin
        docker build -f ./Dockerfile --pull --no-cache -t ${DH_USERNAME}/pimusic:${{ steps.vars.outputs.version }} .
        docker push ${DH_USERNAME}/pimusic:${{ steps.vars.outputs.version }}
        if [ "${GITHUB_REF##*/}" == "master" ]; then
          echo "Tagging as latest"
          docker tag ${DH_USERNAME}/pimusic:${{ steps.vars.outputs.version }} ${DH_USERNAME}/pimusic:latest 
          docker push ${DH_USERNAME}/pimusic:latest
        elif [ "${GITHUB_REF##*/}" == "develop" ]; then
          echo "Tagging as develop"
          docker tag ${DH_USERNAME}/pimusic:${{ steps.vars.outputs.version }} ${DH_USERNAME}/pimusic:develop 
          docker push ${DH_USERNAME}/pimusic:develop
        fi
