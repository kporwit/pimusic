name: Tag pimusic version

on:
  pull_request:
    types: [ closed ]
    branches:
      - main
      - master
      - develop

jobs:

  build-amd64:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Set new tag
      id: vars
      run: |
        version=$(git tag -l | sort -V | tail -1)
        major=$(echo $version | grep -Eo "v[0-9]{1,}\." | sed -r "s/(v|\.)//g")
        minor=$(echo $version | grep -Eo "\.[0-9]{1,}\." | sed "s/\.//g")
        hotfix=$(echo $version | grep -Eo "\.[0-9]{1,}$" | sed "s/\.//g")
        echo "version: ${version}, major: ${major}, minor: ${minor}, hotfix: ${hotfix}"
        echo "git head branch: ${GITHUB_HEAD_REF}" 
        echo "git target branch: ${GITHUB_BASE_REF}" 
        set_tag=true
        if $(echo "${GITHUB_HEAD_REF}" | grep -q "devops/"); then
          echo "Merge from devops branch detected. Not setting any tag."
          set_tag=false
        else
          if $(echo "${GITHUB_HEAD_REF}" | grep -q "hotfix/"); then
            hotfix=$(( hotfix + 1 ))
          elif [ "${GITHUB_BASE_REF##*/}" == "master" ]; then
            major=$(( major + 1 ))
            minor=0
            hotfix=0
          elif [ "${GITHUB_BASE_REF##*/}" == "develop" ]; then
            minor=$(( minor + 1 ))
            hotfix=0
          fi
        fi
        new_version="v${major}.${minor}.${hotfix}"
        echo "Old version: ${version}, new version ${new_version}"
        echo ::set-output name=new_version::${new_version}
        echo ::set-output name=set_tag::${set_tag}

    - name: Prepare Dockerfile from template
      if: ${{ steps.vars.output.set_tag == true }}
      shell: bash
      run : |
        ./prepare_dockerfile.sh -a amd64 -c ./config.yaml -d ./Dockerfile -v

    - name: Docker build and push
      if: ${{ steps.vars.output.set_tag == true }}
      shell: bash
      env: 
        DH_USERNAME: ${{ secrets.DOCKERHUB_LOGIN }}
        DH_TOKEN:    ${{ secrets.DOCKERHUB_TOKEN }}
      run: |
        echo ${DH_TOKEN} | docker login --username ${DH_USERNAME} --password-stdin
        docker build -f ./Dockerfile -t ${DH_USERNAME}/pimusic_amd64:${{ steps.vars.outputs.new_version }} .
        docker push ${DH_USERNAME}/pimusic_amd64:${{ steps.vars.outputs.new_version }}
        if [ "${GITHUB_BASE_REF##*/}" == "master" ]; then
          echo "Tagging as latest"
          docker tag ${DH_USERNAME}/pimusic_amd64:${{ steps.vars.outputs.new_version }} ${DH_USERNAME}/pimusic_amd64:latest 
          docker push ${DH_USERNAME}/pimusic_amd64:latest
        elif [ "${GITHUB_BASE_REF##*/}" == "develop" ]; then
          echo "Tagging as develop"
          docker tag ${DH_USERNAME}/pimusic_amd64:${{ steps.vars.outputs.new_version }} ${DH_USERNAME}/pimusic_amd64:develop 
          docker push ${DH_USERNAME}/pimusic_amd64:develop
        fi

  build-arm32:
    if: github.event.pull_request.merged == true
    runs-on: [self-hosted, ARM]
    steps:
    - name: Checkout repo 
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Set new tag
      id: vars
      run: |
        version=$(git tag -l | sort -V | tail -1)
        major=$(echo $version | grep -Eo "v[0-9]{1,}\." | sed -r "s/(v|\.)//g")
        minor=$(echo $version | grep -Eo "\.[0-9]{1,}\." | sed "s/\.//g")
        hotfix=$(echo $version | grep -Eo "\.[0-9]{1,}$" | sed "s/\.//g")
        echo "version: ${version}, major: ${major}, minor: ${minor}, hotfix: ${hotfix}"
        echo "git head branch: ${GITHUB_HEAD_REF}" 
        echo "git target branch: ${GITHUB_BASE_REF}" 
        set_tag=true
        if $(echo "${GITHUB_HEAD_REF}" | grep -q "devops/"); then
          echo "Merge from devops branch detected. Not setting any tag."
          set_tag=false
        else
          if $(echo "${GITHUB_HEAD_REF}" | grep -q "hotfix/"); then
            hotfix=$(( hotfix + 1 ))
          elif [ "${GITHUB_BASE_REF##*/}" == "master" ]; then
            major=$(( major + 1 ))
            minor=0
            hotfix=0
          elif [ "${GITHUB_BASE_REF##*/}" == "develop" ]; then
            minor=$(( minor + 1 ))
            hotfix=0
          fi
        fi
        new_version="v${major}.${minor}.${hotfix}"
        echo "Old version: ${version}, new version ${new_version}"
        echo ::set-output name=new_version::${new_version}

    - name: Prepare Dockerfile from template
      if: ${{ steps.vars.output.set_tag == true }}
      shell: bash
      run : |
        ./prepare_dockerfile.sh -a arm32 -c ./config.yaml -d ./Dockerfile -v

    - name: Docker build and push
      if: ${{ steps.vars.output.set_tag == true }}
      shell: bash
      env: 
        DH_USERNAME: ${{ secrets.DOCKERHUB_LOGIN }}
        DH_TOKEN:    ${{ secrets.DOCKERHUB_TOKEN }}
      run: |
        echo ${DH_TOKEN} | docker login --username ${DH_USERNAME} --password-stdin
        docker build -f ./Dockerfile -t ${DH_USERNAME}/pimusic:${{ steps.vars.outputs.new_version }} .
        docker push ${DH_USERNAME}/pimusic:${{ steps.vars.outputs.new_version }}
        if [ "${GITHUB_BASE_REF##*/}" == "master" ]; then
          echo "Tagging as latest"
          docker tag ${DH_USERNAME}/pimusic:${{ steps.vars.outputs.new_version }} ${DH_USERNAME}/pimusic:latest 
          docker push ${DH_USERNAME}/pimusic:latest
        elif [ "${GITHUB_BASE_REF##*/}" == "develop" ]; then
          echo "Tagging as develop"
          docker tag ${DH_USERNAME}/pimusic:${{ steps.vars.outputs.new_version }} ${DH_USERNAME}/pimusic:develop 
          docker push ${DH_USERNAME}/pimusic:develop
        fi

  create-tag:
    runs-on: ubuntu-latest
    needs: [build-amd64, build-arm32]
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Set new tag
      id: vars
      run: |
        version=$(git tag -l | sort -V | tail -1)
        major=$(echo $version | grep -Eo "v[0-9]{1,}\." | sed -r "s/(v|\.)//g")
        minor=$(echo $version | grep -Eo "\.[0-9]{1,}\." | sed "s/\.//g")
        hotfix=$(echo $version | grep -Eo "\.[0-9]{1,}$" | sed "s/\.//g")
        echo "version: ${version}, major: ${major}, minor: ${minor}, hotfix: ${hotfix}"
        echo "git head branch: ${GITHUB_HEAD_REF}" 
        echo "git target branch: ${GITHUB_BASE_REF}" 
        set_tag=true
        if $(echo "${GITHUB_HEAD_REF}" | grep -q "devops/"); then
          echo "Merge from devops branch detected. Not setting any tag."
          set_tag=false
        else
          if $(echo "${GITHUB_HEAD_REF}" | grep -q "hotfix/"); then
            hotfix=$(( hotfix + 1 ))
          elif [ "${GITHUB_BASE_REF##*/}" == "master" ]; then
            major=$(( major + 1 ))
            minor=0
            hotfix=0
          elif [ "${GITHUB_BASE_REF##*/}" == "develop" ]; then
            minor=$(( minor + 1 ))
            hotfix=0
          fi
        fi
        new_version="v${major}.${minor}.${hotfix}"
        echo "Old version: ${version}, new version ${new_version}"
        echo ::set-output name=new_version::${new_version}
    - name: Create new tag
      if: ${{ steps.vars.output.set_tag == true }}
      uses: tvdias/github-tagger@v0.0.1
      with:
        repo-token: "${{ secrets.GITHUB_TOKEN }}"
        tag: "${{ steps.vars.outputs.new_version }}"
